<?php

/**
 * @file
 * Enhances the token API in core: adds a browseable UI, missing tokens, etc.
 */

/**
 * Implements hook_menu().
 */
function reader_main_menu() {
  /*$items['token/autocomplete/all/%menu_tail'] = array(
    'page callback' => 'token_autocomplete',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'token.pages.inc',
  );*/
  $items['reader_frontaa'] = array(
    'page callback' => 'page_reader_front',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'reader_pages.pages.inc',
  );

  return $items;
}




/**
 * Implements hook_init().
 */
function reader_main_init() {
  drupal_add_css(drupal_get_path('module', 'reader_main') . '/reader_main.css');
}



function reader_main_preprocess_node(&$variables) {
//  dsm($variables);

  $flag = flag_get_flag('read');
  if ($flag && $flag->is_flagged($variables['node']->nid)) {
    $variables['classes_array'][] = 'have-read';
  } else {
    $variables['classes_array'][] = 'didnt-read';
  }

}


///**
// * Implements hook_theme().
// */
//function token_theme() {
//  $info['tree_table'] = array(
//    'variables' => array(
//      'header' => array(),
//      'rows' => array(),
//      'attributes' => array(),
//      'empty' => '',
//      'caption' => '',
//    ),
//    'file' => 'token.pages.inc',
//  );
//  $info['token_tree'] = array(
//    'variables' => array(
//      'token_types' => array(),
//      'global_types' => TRUE,
//      'click_insert' => TRUE,
//      'show_restricted' => FALSE,
//      'recursion_limit' => 3,
//      'dialog' => FALSE,
//    ),
//    'file' => 'token.pages.inc',
//  );
//  $info['token_tree_link'] = array(
//    'variables' => array(
//      'text' => NULL,
//      'options' => array(),
//      'dialog' => TRUE,
//    ),
//    'file' => 'token.pages.inc',
//  );
//
//  return $info;
//}
//
//function reader_pages_preprocess_node(&$vars){
//    $o = '';
//    //, node_feed_item.*
//    $o .= '<h3>Articles</h3>';
//    $sql = "SELECT source, node_feed_item.*
//        FROM node 
//        LEFT JOIN feeds_item ON node.nid = feeds_item.feed_nid
//        LEFT JOIN feeds_source ON feeds_source.feed_nid = node.nid
//        LEFT JOIN node AS node_feed_item ON feeds_item.entity_id = node_feed_item.nid
//        WHERE node.nid = :nid
//        ORDER BY node_feed_item.nid DESC";
//    $results = db_query($sql, array(':nid' => $vars['nid']));
//    foreach($results as $result){
//        //dsm($result);
//        $o .= '<h3>' . $result->title . '</h3>';
//    }
//    $vars['content']['new_content'] = array('#markup' => $o);
//}

function get_feed_nid_of_feed_item($nid) {
  $sql = "SELECT feed_nid
      FROM feeds_item 
      WHERE entity_id = :nid
      LIMIT 1";
  return db_query($sql, array(':nid' => $nid))->fetchField();
}



function get_info_of_feed_item($nid) {
  $sql = "SELECT feeds_item.*, node.title as feed_title
      FROM feeds_item 
      LEFT JOIN node ON feed_nid = node.nid
      WHERE entity_id = :nid
      LIMIT 1";
  return db_query($sql, array(':nid' => $nid))->fetchObject();
}




//http://alanwhipple.com/2011/05/25/php-truncate-string-preserving-html-tags-words/

/**
 * truncateHtml can truncate a string up to a number of characters while preserving whole words and HTML tags
 *
 * @param string $text String to truncate.
 * @param integer $length Length of returned string, including ellipsis.
 * @param string $ending Ending to be appended to the trimmed string.
 * @param boolean $exact If false, $text will not be cut mid-word
 * @param boolean $considerHtml If true, HTML tags would be handled correctly
 *
 * @return string Trimmed string.
 */
function aud_truncateHtml($text, $length = 100, $ending = '...', $exact = false, $considerHtml = true) {
	if ($considerHtml) {
		// if the plain text is shorter than the maximum length, return the whole text
		if (strlen(preg_replace('/<.*?>/', '', $text)) <= $length) {
			return $text;
		}
		// splits all html-tags to scanable lines
		preg_match_all('/(<.+?>)?([^<>]*)/s', $text, $lines, PREG_SET_ORDER);
		$total_length = strlen($ending);
		$open_tags = array();
		$truncate = '';
		foreach ($lines as $line_matchings) {
			// if there is any html-tag in this line, handle it and add it (uncounted) to the output
			if (!empty($line_matchings[1])) {
				// if it's an "empty element" with or without xhtml-conform closing slash
				if (preg_match('/^<(\s*.+?\/\s*|\s*(img|br|input|hr|area|base|basefont|col|frame|isindex|link|meta|param)(\s.+?)?)>$/is', $line_matchings[1])) {
					// do nothing
				// if tag is a closing tag
				} else if (preg_match('/^<\s*\/([^\s]+?)\s*>$/s', $line_matchings[1], $tag_matchings)) {
					// delete tag from $open_tags list
					$pos = array_search($tag_matchings[1], $open_tags);
					if ($pos !== false) {
					unset($open_tags[$pos]);
					}
				// if tag is an opening tag
				} else if (preg_match('/^<\s*([^\s>!]+).*?>$/s', $line_matchings[1], $tag_matchings)) {
					// add tag to the beginning of $open_tags list
					array_unshift($open_tags, strtolower($tag_matchings[1]));
				}
				// add html-tag to $truncate'd text
				$truncate .= $line_matchings[1];
			}
			// calculate the length of the plain text part of the line; handle entities as one character
			$content_length = strlen(preg_replace('/&[0-9a-z]{2,8};|&#[0-9]{1,7};|[0-9a-f]{1,6};/i', ' ', $line_matchings[2]));
			if ($total_length+$content_length> $length) {
				// the number of characters which are left
				$left = $length - $total_length;
				$entities_length = 0;
				// search for html entities
				if (preg_match_all('/&[0-9a-z]{2,8};|&#[0-9]{1,7};|[0-9a-f]{1,6};/i', $line_matchings[2], $entities, PREG_OFFSET_CAPTURE)) {
					// calculate the real length of all entities in the legal range
					foreach ($entities[0] as $entity) {
						if ($entity[1]+1-$entities_length <= $left) {
							$left--;
							$entities_length += strlen($entity[0]);
						} else {
							// no more characters left
							break;
						}
					}
				}
				$truncate .= substr($line_matchings[2], 0, $left+$entities_length);
				// maximum lenght is reached, so get off the loop
				break;
			} else {
				$truncate .= $line_matchings[2];
				$total_length += $content_length;
			}
			// if the maximum length is reached, get off the loop
			if($total_length>= $length) {
				break;
			}
		}
	} else {
		if (strlen($text) <= $length) {
			return $text;
		} else {
			$truncate = substr($text, 0, $length - strlen($ending));
		}
	}
	// if the words shouldn't be cut in the middle...
	if (!$exact) {
		// ...search the last occurance of a space...
		$spacepos = strrpos($truncate, ' ');
		if (isset($spacepos)) {
			// ...and cut the text in this position
			$truncate = substr($truncate, 0, $spacepos);
		}
	}
	// add the defined ending to the text
	$truncate .= $ending;
	if($considerHtml) {
		// close all unclosed html-tags
		foreach ($open_tags as $tag) {
			$truncate .= '</' . $tag . '>';
		}
	}
	return $truncate;
}