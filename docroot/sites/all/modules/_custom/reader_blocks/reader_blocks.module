<?php

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function reader_blocks_block_info() {
  // This hook returns an array, each component of which is an array of block
  // information. The array keys are the 'delta' values used in other block
  // hooks.
  // The required block information is a block description, which is shown
  // to the site administrator in the list of possible blocks. You can also
  // provide initial settings for block weight, status, etc.
  // Many options are defined in hook_block_info():
  $blocks['list_of_feeds'] = array(
      // info: The name of the block.
      'info' => t('List of feeds'),
      // Block caching options (per role, per user, etc.)
      'cache' => DRUPAL_CACHE_PER_ROLE, // default
  );

//  // This sample shows how to provide default settings. In this case we'll
//  // enable the block in the first sidebar and make it visible only on
//  // 'node/*' pages. See the hook_block_info() documentation for these.
//  $blocks['example_empty'] = array(
//    'info' => t('Example: empty block'),
//    'status' => TRUE,
//    'region' => 'sidebar_first',  // Not usually provided.
//    'visibility' => BLOCK_VISIBILITY_LISTED,  // Not usually provided.
//    'pages' => 'node/*', // Not usually provided here.
//  );
//
//  $blocks['example_uppercase'] = array(
//    // info: The name of the block.
//    'info' => t('Example: uppercase this please'),
//    'status' => TRUE,
//    'region' => 'sidebar_first',  // Not usually provided.
//  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function reader_blocks_block_view($delta = '') {
  //The $delta parameter tells us which block is being requested.
  switch ($delta) {
//    case 'example_configurable_text':
//      // The subject is displayed at the top of the block. Note that it
//      // should be passed through t() for translation. The title configured
//      // for the block using Drupal UI supercedes this one.
//      $block['subject'] = t('Title of first block (example_configurable_text)');
//      // The content of the block is typically generated by calling a custom
//      // function.
//      $block['content'] = block_example_contents($delta);
//      break;
    case 'list_of_feeds':
      $block['subject'] = t('Feeds');
      $block['content'] = 'disabled block'; //block_list_of_feeds_contents();
      break;
//    case 'example_uppercase':
//      $block['subject'] = t("uppercase this please");
//      $block['content'] = t("This block's title will be changed to uppercase. Any other block with 'uppercase' in the subject or title will also be altered. If you change this block's title through the UI to omit the word 'uppercase', it will still be altered to uppercase as the subject key has not been changed.");
//      break;
  }
  return $block;
}

function block_list_of_feeds_contents() {
  global $user;
  $node = menu_get_object();
  $active_feed_nid = 0;
  if (!empty($node->type)) {
    if ($node->type == 'feed') {
      $active_feed_nid = $node->nid;
    } elseif($node->type == 'feed_item') {
      $feed_item_info = get_info_of_feed_item($node->nid);
      $active_feed_nid = $feed_item_info->feed_nid;
    }
  } 
  $o = '';
  $top_o = '';
  $new_o = '';
  $old_o = '';
  $uid = 0;
  if ($user->uid) {
    $uid = $user->uid;
  }
  $sql = "SELECT node.title, node.nid, source, COUNT(feeds_item.feed_nid) AS total_items , COUNT(flag_content.fcid) AS old_items
        FROM node 
        LEFT JOIN feeds_item ON node.nid = feeds_item.feed_nid
        LEFT JOIN flag_content ON fid = 2 AND flag_content.content_id = feeds_item.entity_id AND flag_content.uid = $uid
        LEFT JOIN feeds_source ON feeds_source.feed_nid = node.nid
        WHERE node.type = 'feed' 
#            AND flag_content.fcid IS NULL 
            AND feeds_item.feed_nid IS NOT NULL 
        GROUP BY node.nid 
        ORDER BY node.title";
  $results = db_query($sql);
  foreach ($results as $result) {
    $class = '';
    if ($active_feed_nid == $result->nid) {
      $class = ' class="active" ';
    }
    if ($result->total_items > $result->old_items) {
      $number = $result->total_items . '/<span class="new">' . ($result->total_items - $result->old_items) . '</span>'; //New
    } else {
      $number = $result->total_items; //Total
    }
    if (isset($_GET['list'])) {
      $feed_o = '<a href="' . url('node/' . $result->nid) . '?list" ' . $class . '>' . $result->title . ' </a><span class="number" title="total ' . $result->total_items . '">(' . $number . ')</span>';
    } else {
      $feed_o = '<a href="' . url('node/' . $result->nid) . '" ' . $class . '>' . $result->title . ' </a><span class="number" title="total ' . $result->total_items . '">(' . $number . ')</span>';
    }
    //$o .= ' <a href="' . $result->source . '"> orig site</a>';
    $feed_o .= '<br/>';
    if ($result->total_items > $result->old_items) {
      $new_o .= $feed_o;
    } else {
      $old_o .= $feed_o;
    }
    if ($active_feed_nid == $result->nid) {
      $top_o = $feed_o . '<br>';
    }
//    $o .= $feed_o;
    //$o .= print_r($result, true);
  }
  if ($old_o) {
    $old_o = '<div class="old-items"><h2>Old items</h2>' . $old_o . '</div>';
  }
  return $top_o . $new_o . $old_o;
}
